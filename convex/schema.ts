// convex/schema.ts
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  // Questions table
  questions: defineTable({
    section: v.string(), // "diagnosis" or "management"
    type: v.string(), // "multiple", "trueFalse", "fillBlank"
    question: v.string(),
    options: v.optional(v.array(v.string())), // For multiple choice
    correctAnswer: v.union(v.number(), v.boolean(), v.string()),
    explanation: v.string(),
    createdAt: v.number(),
    updatedAt: v.number(),
  })
    .index("by_section", ["section"])
    .index("by_type", ["type"])
    .index("by_created", ["createdAt"]),

  // Medical knowledge base for RAG
  knowledgeBase: defineTable({
    topic: v.string(), // e.g., "migraine", "cluster_headache", "ICHD3_criteria"
    category: v.string(), // e.g., "diagnosis", "management", "pathophysiology"
    content: v.string(), // The actual knowledge content
    source: v.string(), // Source reference (e.g., "ICHD-3", "AAN Guidelines")
    tags: v.array(v.string()), // For better searching
    embedding: v.optional(v.array(v.number())), // Vector embedding for RAG
    createdAt: v.number(),
  })
    .index("by_topic", ["topic"])
    .index("by_category", ["category"])
    .vectorIndex("by_embedding", {
      vectorField: "embedding",
      dimensions: 1536, // OpenAI ada-002 dimension
      filterFields: ["category", "topic"],
    }),

  // Learning theory templates
  learningTemplates: defineTable({
    name: v.string(), // e.g., "UDL", "Mayer's Multimedia", "Cognitive Load"
    principles: v.array(v.string()),
    applicationRules: v.string(), // How to apply these principles
    exampleFormats: v.array(v.string()),
  }),

  // Generated videos
  videos: defineTable({
    userId: v.optional(v.string()),
    prompt: v.string(),
    topic: v.string(),
    script: v.string(), // Generated by Claude
    heygenVideoId: v.optional(v.string()), // HeyGen video ID
    videoUrl: v.optional(v.string()),
    thumbnailUrl: v.optional(v.string()),
    status: v.string(), // "pending", "processing", "completed", "failed"
    duration: v.optional(v.number()),
    createdAt: v.number(),
    completedAt: v.optional(v.number()),
  })
    .index("by_user", ["userId"])
    .index("by_status", ["status"])
    .index("by_created", ["createdAt"]),

  // User progress and scores
  userProgress: defineTable({
    userId: v.string(),
    quizAttempts: v.number(),
    bestScore: v.object({
      diagnosis: v.number(),
      management: v.number(),
      total: v.number(),
    }),
    lastAttemptDate: v.number(),
    questionsAnswered: v.array(
      v.object({
        questionId: v.id("questions"),
        correct: v.boolean(),
        attemptDate: v.number(),
      })
    ),
  }).index("by_user", ["userId"]),

  // Clinical images
  clinicalImages: defineTable({
    topic: v.string(), // e.g., "papilledema", "horner_syndrome"
    imageUrl: v.string(), // Stored in Convex file storage
    caption: v.string(),
    vetted: v.boolean(), // Clinically vetted
    tags: v.array(v.string()),
    uploadedAt: v.number(),
  })
    .index("by_topic", ["topic"])
    .index("by_vetted", ["vetted"]),
});